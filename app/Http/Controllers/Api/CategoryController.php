<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Category;
use Illuminate\Support\Facades\Validator;

class CategoryController extends Controller
{
    // üìå L·∫•y danh s√°ch t·∫•t c·∫£ danh m·ª•c
    public function index()
    {
        $categories = Category::all();

        return response()->json([
            'status' => true,
            'message' => 'Danh s√°ch danh m·ª•c',
            'data' => $categories
        ], 200);
    }

    // üìå L·∫•y chi ti·∫øt 1 danh m·ª•c
    public function show($id)
    {
        $category = Category::find($id);

        if (!$category) {
            return response()->json([
                'status' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
            ], 404);
        }

        return response()->json([
            'status' => true,
            'data' => $category
        ], 200);
    }

    // üìå Th√™m danh m·ª•c m·ªõi
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name'        => 'required|string|max:255|unique:categories,name',
            'description' => 'nullable|string'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                'errors' => $validator->errors()
            ], 422);
        }

        $category = Category::create([
            'name'        => $request->name,
            'description' => $request->description
        ]);

        return response()->json([
            'status' => true,
            'message' => 'Th√™m danh m·ª•c th√†nh c√¥ng',
            'data' => $category
        ], 201);
    }

    // üìå C·∫≠p nh·∫≠t danh m·ª•c
    public function update(Request $request, $id)
    {
        $category = Category::find($id);

        if (!$category) {
            return response()->json([
                'status' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
            ], 404);
        }

        $validator = Validator::make($request->all(), [
           'name' => 'required|string|max:255|unique:categories,name,' . $category->category_id . ',category_id',
           'description' => 'nullable|string'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => false,
                'message' => 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
                'errors' => $validator->errors()
            ], 422);
        }

        $category->update([
            'name'        => $request->name,
            'description' => $request->description
        ]);

        return response()->json([
            'status' => true,
            'message' => 'C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng',
            'data' => $category
        ], 200);
    }

    // üìå X√≥a danh m·ª•c
    public function destroy($id)
    {
        $category = Category::find($id);

        if (!$category) {
            return response()->json([
                'status' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y danh m·ª•c'
            ], 404);
        }

        // Ki·ªÉm tra xem danh m·ª•c c√≥ ch·ª©a t√†i s·∫£n (AuctionItem) kh√¥ng
        if ($category->auctionItems()->count() > 0) {
            return response()->json([
                'status' => false,
                'message' => 'Kh√¥ng th·ªÉ x√≥a danh m·ª•c v√¨ danh m·ª•c n√†y ch·ª©a t√†i s·∫£n'
            ], 400);
        }

        $category->delete();

        return response()->json([
            'status' => true,
            'message' => 'X√≥a danh m·ª•c th√†nh c√¥ng'
        ], 200);
    }
}
