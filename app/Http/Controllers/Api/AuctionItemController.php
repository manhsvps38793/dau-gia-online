<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\AuctionItem;
use App\Http\Resources\AuctionItemResource;
use Illuminate\Support\Facades\Storage;

class AuctionItemController extends Controller
{
    // üü¢ CREATE (Th√™m s·∫£n ph·∫©m)
    public function store(Request $request)
    {
        $request->validate([
            'category_id'    => 'required|exists:Categories,category_id',
            'owner_id'       => 'required|exists:Users,user_id',
            'name'           => 'required|string|max:255',
            'description'    => 'nullable|string',
            'starting_price' => 'required|numeric|min:1',
            'image'          => 'nullable|image|mimes:jpg,jpeg,png,gif|max:2048',
            'status'         => 'in:ChoDuyet,ChoDauGia,DangDauGia,DaBan,Huy'
        ]);

        // ‚úÖ L∆∞u file h√¨nh ·∫£nh n·∫øu c√≥
        $imageUrl = null;
        if ($request->hasFile('image')) {
            $path = $request->file('image')->store('auction_images', 'public');
            $imageUrl = Storage::url($path);
        }

        // ‚úÖ T·∫°o s·∫£n ph·∫©m
        $item = AuctionItem::create([
            'category_id'    => $request->category_id,
            'owner_id'       => $request->owner_id,
            'name'           => $request->name,
            'description'    => $request->description,
            'starting_price' => $request->starting_price,
            'image_url'      => $imageUrl,
            'status'         => $request->status ?? 'ChoDuyet',
            'created_at'     => now(),
        ]);

        // üü¢ Realtime broadcast
        broadcast(new \App\Events\ItemCreated($item))->toOthers();

        return response()->json([
            'status'  => true,
            'message' => 'T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng',
            'item'    => new AuctionItemResource($item),
        ], 201);
    }

    // üü° LIST (Danh s√°ch)
    public function index()
    {
        $items = AuctionItem::with('category')
            ->whereNull('deleted_at')
            ->orderByDesc('created_at')
            ->get();

        return AuctionItemResource::collection($items);
    }

    // üü£ SHOW (Chi ti·∫øt s·∫£n ph·∫©m)
    public function show($id)
    {
        $item = AuctionItem::with([
            'category',
            'owner',
            'sessions.auctionOrg',
            'sessions.bids.user',
            'sessions.contract'
        ])->findOrFail($id);

        if ($item->deleted_at) {
            return response()->json(['status' => false, 'message' => 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'], 404);
        }

        return new AuctionItemResource($item);
    }

    // üü† UPDATE (C·∫≠p nh·∫≠t)
    public function update(Request $request, $id)
    {
        $item = AuctionItem::findOrFail($id);

        if ($item->deleted_at) {
            return response()->json(['status' => false, 'message' => 'S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a'], 404);
        }

        // ‚úÖ Ki·ªÉm tra quy·ªÅn
        $user = $request->user();
        $allowedRoles = ['Administrator', 'ToChucDauGia'];
        if ($item->owner_id !== $user->user_id && !in_array($user->role, $allowedRoles)) {
            return response()->json(['status' => false, 'message' => 'Kh√¥ng c√≥ quy·ªÅn s·ª≠a s·∫£n ph·∫©m n√†y'], 403);
        }

        // ‚úÖ Validate d·ªØ li·ªáu c·∫≠p nh·∫≠t
        $validated = $request->validate([
            'category_id'    => 'sometimes|exists:Categories,category_id',
            'name'           => 'sometimes|string|max:255',
            'description'    => 'nullable|string',
            'starting_price' => 'sometimes|numeric|min:1',
            'image'          => 'nullable|image|mimes:jpg,jpeg,png,gif|max:2048',
            'status'         => 'sometimes|in:ChoDuyet,ChoDauGia,DangDauGia,DaBan,Huy'
        ]);

        // ‚úÖ Upload ·∫£nh m·ªõi n·∫øu c√≥
        if ($request->hasFile('image')) {
            // X√≥a ·∫£nh c≈© n·∫øu c√≥
            if ($item->image_url && str_contains($item->image_url, '/storage/')) {
                $oldPath = str_replace('/storage/', '', $item->image_url);
                Storage::disk('public')->delete($oldPath);
            }

            $path = $request->file('image')->store('auction_images', 'public');
            $validated['image_url'] = Storage::url($path);
        }

        // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin
        $item->fill($validated);
        $item->save();

        // üîî Broadcast realtime
        broadcast(new \App\Events\ItemUpdated($item))->toOthers();

        return response()->json([
            'status'  => true,
            'message' => 'C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng',
            'item'    => new AuctionItemResource($item)
        ]);
    }

    // üî¥ DESTROY (X√≥a m·ªÅm)
    public function destroy(Request $request, $id)
    {
        $item = AuctionItem::findOrFail($id);

        if ($item->deleted_at) {
            return response()->json(['status' => false, 'message' => 'S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a'], 404);
        }

        $user = $request->user();
        $allowedRoles = ['Administrator', 'ToChucDauGia'];
        if ($item->owner_id !== $user->user_id && !in_array($user->role, $allowedRoles)) {
            return response()->json(['status' => false, 'message' => 'Kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m n√†y'], 403);
        }

        $item->deleted_at = now();
        $item->status = 'Huy';
        $item->save();

        return response()->json([
            'status'  => true,
            'message' => 'X√≥a s·∫£n ph·∫©m th√†nh c√¥ng'
        ]);
    }
}
